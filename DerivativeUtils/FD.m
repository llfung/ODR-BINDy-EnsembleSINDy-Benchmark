function [I,D1,D2]=FD(N_pt,N_dom,dt,FullMatFlag)
    %% Generate Differential Matrices using Finite Differences, assuming equispacing / constant sampling frequency
    % INPUT ARGUMENT
    %
    % N_pt     Number of data points
    %
    % N_dom    Order of accuracy (Number of points used -1 / Number of domain
    %          used to obtain each derivative point)
    %
    % dt       Delta t between two adjacent points
    %
    % Copyright 2025, All Rights Reserved
    % Code by Lloyd Fung
    %    For package ODR-BINDy
    %

    if nargin <4
        FullMatFlag = false;
    end
    %% Initialisation (check if N_dom is supported)
    if  N_dom <=1
        error('N_dom must be positive even integer');
    elseif mod(N_dom,2)~=0
        error('Odd N_dom not yet implemented.');
    else
        %% Generate differential matrices based on the order of accuracy
        switch N_dom
            case 2
                D1=spdiags(ones(N_pt,1)*[-1/2 0 1/2]/dt,0:2,N_pt-2,N_pt);
                D2=spdiags(ones(N_pt,1)*[1 -2 1]/dt^2,0:2,N_pt-2,N_pt);
                if FullMatFlag
                    I=spdiags(ones(N_pt,1),0,N_pt,N_pt);
                    D1=[[-1 1 zeros(1,N_pt-2)]/dt; D1 ; [zeros(1,N_pt-2) -1 1]/dt];
                    D2=[[1 -2 1 zeros(1,N_pt-3)]/dt^2; D2 ; [zeros(1,N_pt-3) 1 -2 1]/dt^2];
                else
                    I=spdiags(ones(N_pt,1)*[0 1 0],0:2,N_pt-2,N_pt);
                end
            case 4
                D1=spdiags(ones(N_pt,1)*[1/12 -2/3 0 2/3 -1/12]/dt,0:4,N_pt-4,N_pt);
                D2=spdiags(ones(N_pt,1)*[-1/12 4/3 -5/2 4/3 -1/12]/dt^2,0:4,N_pt-4,N_pt);
                if FullMatFlag
                    I=spdiags(ones(N_pt,1),0,N_pt,N_pt);
                    D1 = [[-3 4 -1 zeros(1,N_pt-3)]/2/dt;...
                          [-2 -3 6 -1 zeros(1,N_pt-4)]/6/dt;...
                          D1;...
                          [zeros(1,N_pt-4) 1 -6 3 2]/6/dt;...
                          [zeros(1,N_pt-3) 1 -4 3]/2/dt];
                    D2 = [[1 -2 1 zeros(1,N_pt-3)]/dt^2;...
                          [1 -2 1 0 zeros(1,N_pt-4)]/dt^2;...
                          D2;...
                          [zeros(1,N_pt-4) 0 1 -2 1]/dt^2;...
                          [zeros(1,N_pt-3) 1 -2 1]/dt^2];
                else
                    I=spdiags(ones(N_pt,1)*[0 0 1 0 0],0:4,N_pt-4,N_pt);
                end
            case 6
                D1=spdiags(ones(N_pt,1)*[-1/60 3/20 -3/4 0 3/4 -3/20 1/60]/dt,0:6,N_pt-6,N_pt);
                D2=spdiags(ones(N_pt,1)*[1/90 -3/20 3/2 -49/18 3/2 -3/20 1/90]/dt^2,0:6,N_pt-6,N_pt);
                if FullMatFlag
                    I=spdiags(ones(N_pt,1),0,N_pt,N_pt);
                    D1 = [[-11 18 -9 2 zeros(1,N_pt-4)]/6/dt;...
                          [-3 -10 18 -6 1 zeros(1,N_pt-5)]/12/dt;...
                          [3 -30 -20 60 -15 2 zeros(1,N_pt-6)]/60/dt;...
                          D1;...
                          [zeros(1,N_pt-6) -2 15 -60 20 30 -3]/60/dt;...
                          [zeros(1,N_pt-5) -1 6 -18 10 3 ]/12/dt;...
                          [zeros(1,N_pt-4) -2 9 -18 11]/6/dt];
                    D2 = [[2 -5 4 -1 zeros(1,N_pt-4)]/dt^2;...
                          [11 -20 6 4 -1 zeros(1,N_pt-5)]/12/dt^2;...
                          [-1 16 -30 16 -1 0 zeros(1,N_pt-6)]/12/dt^2;...
                          D2;...
                          [zeros(1,N_pt-6) 0 -1 16 -30 16 -1]/12/dt^2;...
                          [zeros(1,N_pt-5) -1 4 6 -20 11]/12/dt^2;...
                          [zeros(1,N_pt-4) -1 4 -5 2]/dt^2];
                else
                    I=spdiags(ones(N_pt,1)*[0 0 0 1 0 0 0],0:6,N_pt-6,N_pt);
                end
            case 8
                D1=spdiags(ones(N_pt,1)*[1/280 -4/105 1/5 -4/5 0 4/5 -1/5 4/105 -1/280]/dt,0:8,N_pt-8,N_pt);
                D2=spdiags(ones(N_pt,1)*[-1/560 8/315 -1/5 8/5 -205/72 8/5 -1/5 8/315 -1/560]/dt^2,0:8,N_pt-8,N_pt);
                if FullMatFlag
                    I=spdiags(ones(N_pt,1),0,N_pt,N_pt);
                    D1 = [[-25 48 -36 16 -3 zeros(1,N_pt-5)]/12/dt;...
                          [-12 -65 120 -60 20 -3 zeros(1,N_pt-6)]/60/dt;...
                          [2 -24 -35 80 -30 8 -1 zeros(1,N_pt-7)]/60/dt;...
                          [-4 42 -252 -105 420 -126 28 -3 zeros(1,N_pt-8)]/420/dt;...
                          D1;...
                          [zeros(1,N_pt-8) 3 -28 126 -420 105 252 -42 4]/420/dt;...
                          [zeros(1,N_pt-7) 1 -8 30 -80 35 24 -2]/60/dt;...
                          [zeros(1,N_pt-6) 3 -20 60 -120 65 12]/60/dt;...
                          [zeros(1,N_pt-5) 3 -16 36 -48 25]/12/dt];
                    D2 = [[ 35 -104 114  -56  11 zeros(1,N_pt-5)]/12/dt^2;...
                          [ 10 -15   -4   14  -6   1 zeros(1,N_pt-6)]/12/dt^2;...
                          [-13 228 -420  200  15 -12 2 zeros(1,N_pt-7)]/180/dt^2;...
                          [  2 -27  270 -490 270 -27 2 0 zeros(1,N_pt-8)]/180/dt^2;...
                          D2;...
                          [zeros(1,N_pt-8) 0 2 -27 270 -490 270 -27   2]/180/dt^2;...
                          [zeros(1,N_pt-7)   2 -12  15 200 -420 228 -13]/180/dt^2;...
                          [zeros(1,N_pt-6)       1  -6  14   -4 -15  10]/12/dt^2;...
                          [zeros(1,N_pt-5)          11 -56  114 -104 35]/12/dt^2];
                else
                    I=spdiags(ones(N_pt,1)*[0 0 0 0 1 0 0 0 0],0:8,N_pt-8,N_pt);
                end
            case 10
                D1=spdiags(ones(N_pt,1)*[-1/1260 5/504 -5/84 5/21 -5/6 0 5/6 -5/21 5/84 -5/504 1/1260]/dt,0:10,N_pt-10,N_pt);
                D2=spdiags(ones(N_pt,1)*[1/3150 -5/1008 5/126 -5/21 5/3 -5269/1800 5/3 -5/21 5/126 -5/1008 1/3150]/dt^2,0:10,N_pt-10,N_pt);
                if FullMatFlag
                    I=spdiags(ones(N_pt,1),0,N_pt,N_pt);
                    D1 = [[-137 300 -300 200 -75 12 zeros(1,N_pt-6)]/60/dt;...
                          [-10 -77 150 -100 50 -15 2 zeros(1,N_pt-7)]/60/dt;...
                          [10 -140 -329 700 -350 140 -35 4 zeros(1,N_pt-8)]/420/dt;...
                          [-5 60 -420 -378 1050 -420 140 -30 3 zeros(1,N_pt-9)]/840/dt;...
                          [5 -60 360 -1680 -504 2520 -840 240 -45 4 zeros(1,N_pt-10)]/2520/dt;...
                          D1;...
                          [zeros(1,N_pt-10) -4 45 -240 840 -2520 504 1680 -360 60 -5]/2520/dt;...
                          [zeros(1,N_pt-9) -3 30 -140 420 -1050 378 420 -60 5]/840/dt;...
                          [zeros(1,N_pt-8) -4 35 -140 350 -700 329 140 -10]/420/dt;...
                          [zeros(1,N_pt-7) -2 15 -50 100 -150 77 10]/60/dt;...
                          [zeros(1,N_pt-6) -12 75 -200 300 -300 137]/60/dt];
                    D2 = [[45 -154 214 -156 61 -10 zeros(1,N_pt-6)]/12/dt^2;...
                          [137 -147 -255 470 -285 93 -13 zeros(1,N_pt-7)]/180/dt^2;...
                          [-11 214 -378 130 85 -54 16 -2 zeros(1,N_pt-8)]/180/dt^2;...
                          [47 -684 7308 -13216 6930 -252 -196 72 -9 zeros(1,N_pt-9)]/5040/dt^2;...
                          [-9 128 -1008 8064 -14350 8064 -1008 128 -9 0 zeros(1,N_pt-10)]/5040/dt^2;...
                          D2;...
                          [zeros(1,N_pt-10) 0 -9 128 -1008 8064 -14350 8064 -1008 128 -9]/5040/dt^2;...
                          [zeros(1,N_pt-9) -9 72 -196 -252 6930 -13216 7308 -684 47]/5040/dt^2;...
                          [zeros(1,N_pt-8) -2 16 -54 85 130 -378 214 -11]/180/dt^2;...
                          [zeros(1,N_pt-7) -13 93 -285 470 -255 -147 137]/180/dt^2;...
                          [zeros(1,N_pt-6) -10 61 -156 214 -154 45]/12/dt^2];
                else
                    I=spdiags(ones(N_pt,1)*[0 0 0 0 0 1 0 0 0 0 0],0:10,N_pt-10,N_pt);
                end
            otherwise
                Coeff0 = zeros(1,N_dom+1);Coeff0(1+N_dom/2)=1;
                [CoeffD1,CoeffD2] = CentralFD(N_dom);
                I=spdiags(ones(N_pt,1)*Coeff0,0:N_dom,N_pt-N_dom,N_pt);
                D1=spdiags(ones(N_pt,1)*CoeffD1/dt,0:N_dom,N_pt-N_dom,N_pt);
                D2=spdiags(ones(N_pt,1)*CoeffD2/dt^2,0:N_dom,N_pt-N_dom,N_pt);
                if FullMatFlag
                    warning('Full Mat is not implemented to this order. Falling back.');
                end
        end
    end
end

%% Internal utility functions
function [CoeffD1,CoeffD2] = CentralFD(n)
    %% 1st and 2nd order Central finite difference Coefficients
    %   Inputs:  
    %       n : order of accuracy (even)
    %
    %   Outputs:
    %       coefs: central finite difference coefficients.
    %
    %   NB: Stable for n<20

    MAT=power(-n/2:n/2,(0:n)'); 
    CoeffD1=MAT\[0;1;zeros(n-1,1)];
    CoeffD2=MAT\[0;0;2;zeros(n-2,1)];
    % Rounding near zeros to zero
    CoeffD1(abs(CoeffD1)<10000*eps)=0;
    CoeffD2(abs(CoeffD1)<10000*eps)=0;
    % Transposing
    CoeffD1=CoeffD1';
    CoeffD2=CoeffD2';
end
